;;;; This file can be loaded by the main program

[def! *features* [quote [LIZP]]]

;;; Boolean not
[def! not [fn* [x] [if x #f #t]]]

;;; Not equal
[def! /= [fn* [x y] [not [= x y]]]]

;;; Assert true. Used for making sure that a quoted form is true
[def! assert
  [fn* [x]
    [if [not [eval x]]
        [println `Assertion failed:' x `\n']
        #t]]]


;;; Non-empty list predicate
[def! some-list?
  [fn* [x]
    [if [list? x]
        [not [empty? x]]
		#f]]]

;;; See if an item, x, is in a list, lst
;;; TODO: fix bug with nested lists
[def! member?
  [fn* [x lst]
    [if [some-list? lst]
		[if [= x [first lst]]
		    #t
			[member? x [rest lst]]]
		#f]]]

;; Do some assertion tests
[assert #t]
[assert `']
[assert assert]
[assert [quote [not #f]]]
[assert [quote [not nil]]]
[assert [quote [/= #t #f]]]
[assert [quote [/= #f nil]]]
[assert [quote [/= #t nil]]]
[assert [quote [/= `' nil]]]
[assert [quote [/= `' `str']]]
[assert [quote [= `' `']]]
[assert [quote [= 0 0]]]
[assert [quote [= = =]]]
[assert [quote [= 3 [+ 1 2]]]]
[assert [quote [= 3 [- 6 3]]]]
[assert [quote [= 48 [* 6 8]]]]
[assert [quote [= -3 [/ 9 -3]]]]
[assert [quote [= [] []]]]
[assert [quote [= [] [list]]]]
[assert [quote [/= [] nil]]]
[assert [quote [= + +]]]
[assert [quote [= `string' `string']]]
[assert [quote [/= `string' `stringbig']]]
[assert [quote [/= `string' `stringbig']]]

;; Welcome message
[println `Welcome to the LIZP read-eval-print-loop.\n']
[println `These *features* are available:' *features* `.\n']

