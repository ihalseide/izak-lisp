;;;; This file can be loaded by the main program

;;; Modulus operator
[def! %
  [fn* [n d]
    [- n [* [/ n d]
       d]]]]

;;; Boolean NOT
[def! not
  [fn* [x]
    [cond x #f
          #t #t]]]

;;; Boolean AND
[def! and
  [fn* [a b]
    [cond [not a] #f
          [not b] #f
          #t #t]]]

;;; Boolean OR
[def! or
  [fn* [a b]
    [cond a #t
          b #t
          #t #f]]]

;;; Not equal
[def! /= [fn* [x y] [not [= x y]]]]

;;; Assert true. Used for making sure that a quoted form is true
[def! assert
  [fn* [x]
    [cond [eval x] #t
          #t [do [println "Assertion failed:" x "\n"]]
                 #f]]]

;;; Non-empty list predicate
[def! some-list?
  [fn* [x]
    [cond [list? x] [not [empty? x]]
          #t #f]]]

;;; See if a list contains the element
[def! member?
  [fn* [e L]
    [cond [some-list? L] [cond [= e [first L]] L
                               #t [member? e [rest L]]]
          #t #f]]]

;;; Calculate the sum of a list of numbers
[def! sum-start
  [fn* [L n]
    [cond [some-list? L] [sum-start [rest L] [+ n [first L]]]
          #t n]]]
[def! sum [fn* [L] [sum-start L 0]]]

;;; Negative numbers
[def! neg [fn* [n] [- 0 n]]]

;; Do some assertion tests
[assert #t]
[assert ""]
[assert assert]
[assert [quote ""]]
[assert [quote [not #f]]]
[assert [quote [not nil]]]
[assert [quote [/= #t #f]]]
[assert [quote [/= #f nil]]]
[assert [quote [/= #t nil]]]
[assert [quote [/= "" nil]]]
[assert [quote [/= "" "str"]]]
[assert [quote [= "" ""]]]
[assert [quote [= 0 0]]]
[assert [quote [= = =]]]
[assert [quote [= 3 [+ 1 2]]]]
[assert [quote [= 3 [- 6 3]]]]
[assert [quote [= 48 [* 6 8]]]]
[assert [quote [= [neg 3] [/ 9 [neg 3]]]]]
[assert [quote [= [] []]]]
[assert [quote [= [] [list]]]]
[assert [quote [/= [] nil]]]
[assert [quote [= + +]]]
[assert [quote [= "string" "string"]]]
[assert [quote [/= "string" "stringbig"]]]
[assert [quote [/= "string" "stringbig"]]]

;; Welcome message
[println "Welcome to the LIZP read-eval-print-loop.\n"]

