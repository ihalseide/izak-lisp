;;;; This file can be loaded by the main program

;;; Assert true. Used for making sure that a quoted form is true
[def! assert
  [fn* [x]
    [cond [eval x] #t
          #t [do [println "Assertion failed:" x "\n"]]]]]
[assert assert]

;;; Modulus operator
[def! %
  [fn* [n d]
    [- n [* [/ n d]
       d]]]]

;;; Boolean NOT
[def! not
  [fn* [x]
    [cond x #f
          #t #t]]]

;;; Boolean AND
[def! and
  [fn* [a b]
    [cond [not a] #f
          [not b] #f
          #t #t]]]

;;; Boolean OR
[def! or
  [fn* [a b]
    [cond a #t
          b #t
          #t #f]]]

;;; Not equal
[def! /= [fn* [x y] [not [= x y]]]]

;;; = True
[def! true? [fn* [x] [= #t x]]]

;;; = False
[def! false? [fn* [x] [= #f x]]]

;;; = False
[def! nil? [fn* [x] [= nil x]]]

;;; Non-empty list predicate
[def! some-list?
  [fn* [x]
    [cond [list? x] [not [empty? x]]
          #t #f]]]

;;; See if a list contains the element
[def! member?
  [fn* [e L]
    [cond [some-list? L] [cond [= e [first L]] L
                               #t [member? e [rest L]]]
          #t #f]]]

;;; Return a symbol that represents the type of x
[def! type-of
  [fn* [x]
    [cond [int? x]      'int
	      [symbol? x]   'symbol
		  [string? x]   'string
		  [function? x] 'function
		  [list? x]     'list
		  #t nil]]]

;;; N is negative?
[def! negative?
  [fn* [n]
    [cond [int? n] [< n 0]
	      #t #f]]]

;;; Get the Nth item of a list
[def! nth
  [fn* [L n]
    [assert '[list? L]]
    [assert '[int? n]]
	[cond [negative? n] "error: n must be non-negative"
	      [empty? L]    "error: n is bigger than the length of L"
	      [= n 0]       [first L]
	      #t            [nth [rest L] [- n 1]]]]]

;;; Calculate the sum of a list of numbers
[def! sum-start
  [fn* [L n]
    [cond [some-list? L] [sum-start [rest L] [+ n [first L]]]
          #t n]]]
[def! sum [fn* [L] [sum-start L 0]]]

;;; Negative numbers
[def! neg [fn* [n] [- 0 n]]]

;; Do some assertion tests
[assert #t]
[assert ""]
[assert 'assert]
[assert '[not #f]]
[assert '[not nil]]
[assert '[/= #t #f]]
[assert '[/= #f nil]]
[assert '[/= #t nil]]
[assert '[/= "" nil]]
[assert '[/= "" "str"]]
[assert '[= "" ""]]
[assert '[= 0 0]]
[assert '[= = =]]
[assert '[= 3 [+ 1 2]]]
[assert '[= 3 [- 6 3]]]
[assert '[= 48 [* 6 8]]]
[assert '[= [neg 3] [/ 9 [neg 3]]]]
[assert '[= [] []]]
[assert '[= [] [list]]]
[assert '[/= [] nil]]
[assert '[= + +]]
[assert '[= "string" "string"]]
[assert '[/= "string" "stringbig"]]
[assert '[/= "string" "stringbig"]]

;; Welcome message
[println "Welcome to the LIZP read-eval-print loop.\n"]

