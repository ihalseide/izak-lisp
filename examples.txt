; Examples file
; Here are some LIZP code examples

; s = function to print sums
[let [s [lambda [x y]
          [print "x: " x
                 ", y: " y
                 ", x + y = " [+ x y]
                 "\n"]]]
  [do [s 1 2]
      [s 13 27]
      [s 0 0]]]

; f = Factorial
[let [f0 [lambda [x p]
           [if [= x 0] 
             p
             [* x [f0 [- x 1] p]]]]
      f [lambda [x] [f0 x 1]]]
  ; 5!
  [f 5]]

[let [x 100] [[let [x 1] [lambda [y] [+ y x]]] 60]]
; --> 160

; get the list of prime factors for a number
[let [#factorize
      [lambda [n i factors]
        [cond [<= n 1] factors
              [> i n] factors
              [= 0 [% n i]] [#factorize [/ n i] i [prepend i factors]]
              otherwise [#factorize n [+ i 1] factors]]]
      factorize [lambda [n] [#factorize n 2 []]]
      ; Convenience function
      f [lambda [n]
           [do [print "\n" n " --> " [factorize n]]]]]
  ; Example factors
  [do [f 0]
      [f 1] 
      [f 16]
      [f 93]
      [f 483]
      [f 29834]]]
