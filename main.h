Cell *EVAL (Cell *x, Cell *env);
Cell *READ ();
Cell *bi_minus (Cell *args);
Cell *bi_plus (Cell *args);
Cell *bi_slash (Cell *args);
Cell *bi_star (Cell *args);
Cell *cell_get ();
Cell *cell_init (enum Cell_kind k);
Cell *env_create (Cell *env_outer);
Cell *env_find (Cell *env, const Cell *sym);
Cell *env_get (Cell *env, Cell *sym);
Cell *env_get_self (Cell *env, const Cell *sym);
Cell *eval_list (Cell *x, Cell *env);
Cell *make_cfunc (Cell *(*c_func)(Cell*));
Cell *make_int (int n);
Cell *make_pair (Cell *first, Cell *rest);
Cell *make_string (String s);
Cell *make_symbol (String s);
Cell *string_create (String s);
Cell *string_intern (String s);
Cell *symbol_lookup (Cell *x, Cell *env);
String cstring (char *str);
bool string_eq (String s1, String s2);
bool string_validp (String *s);
char char_end (char c);
char isparen (char c);
int is_symbol_char (char c);
int print_char (char c, String out);
int print_cstr (char *s, String out);
int print_form (Cell *x, String out);
int print_int (int n, String out);
int print_pair (Cell *x, String out);
int print_symbol (String sym, String out);
int read_form (String s, Cell **out);
int read_int (String s, Cell **out);
int read_list (String s, Cell **out);
int read_symbol (String s, Cell **out);
int stream_eq (const char *s1, const char *s2, int len);
int string_find (const char *s, char x);
void PRINT (Cell *expr);
void cell_free (Cell *x);
void env_set (Cell *env, Cell *sym, Cell *val);
void env_set_c (Cell *env, char *cstr, Cell *val);
void pools_init (int ncells, int nchars);
void reverse_list (Cell **list);
void string_skip_white (String *s);
void string_step (String *s, int n);
